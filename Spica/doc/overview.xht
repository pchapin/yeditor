<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC
  "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<!-- FILE   : overview.xht
     AUTHOR : Peter C. Chapin
     SUBJECT: Overview of C++ library organization. -->

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US">

  <head>
    <title>C++ Components Overview</title>

    <meta name="Author" content="Peter C. Chapin" />
    <meta name="ROBOTS" content="NOARCHIVE" />
    <link rel="stylesheet" href="../../default.css" type="text/css" />
  </head>

  <body>
    <h1>C++ Components Overview</h1>
    <hr />
    <h2>Table of Contents</h2>

    <ol>
      <li><a href="#intro">Introduction</a></li>
      <li><a href="#name">Namespace Organization</a></li>
      <li><a href="#plat">Platform Support</a></li>
      <li><a href="#headers">Header Conventions</a></li>
      <li><a href="#except">Exceptions</a></li>
      <li><a href="#thread">Threads</a></li>
      <li><a href="#help">Want to Help?</a></li>
    </ol>

    <hr />
    <h2>
      <a name="intro">Introduction</a>
    </h2>

    <p>Hello! My name is Peter Chapin. This document is an overview of the Spica library of C++
    components.</p>

    <p>This is not a commercial library. It was developed largely for my own educational
    interest. Consequently I don't hesitate to make incompatible changes to a component if it
    allows the new version to be significantly better in some way. Compatibility with previous
    releases is a low priority. I also do not spend a great deal of effort trying to keep the
    various components synchronized. In general when I upgrade a component I upgrade all
    supporting components if necessary. However, I don't usually verify (right away) that all
    other components in the library that depend on any modified components will still work.</p>

    <p>Although my components are all copyrighted by me, they are distributed under the GNU
    General Public License (GPL). Thus you are free to use these components in your own programs
    provided you either don't distribute your program or that you distribute your program also
    under the terms of the GPL.</p>

    <p>If you do enhance or fix a component, I invite you to send me your changes. I would like
    to incorporate your enhancements into my version and I would be happy to fully credit you
    (in the tradition of open source software development). Even if you just have comments or
    ideas about these components, send me email to let me know.</p>

    <hr />
    <h2><a name="name">Namespace Organization</a></h2>

    <p>In order to minimize collisions with names from other libraries, all the components in
    this library are placed inside namespace <tt>spica</tt>.</p>


    <hr />
    <h2><a name="plat">Platform Support</a></h2>

    <p>I have an interest in cross platform library development. I support diversity in the
    computer industry, and I want to encouarge good software to be written for every available
    platform. Consequently whenever possible I write components that are portable. In fact some
    of my components exist purely to offer a portable interface to platform specific
    features.</p>

    <p>At the moment, I only have good access to Windows and Linux systems. Thus these are the
    two platforms that I normally target. However, I would be interested in expanding the scope
    of platforms supported by my components if possible. I need help here since I can't afford
    to purchase development systems for every possible platform (this is just an amateur effort
    on my part).</p>

    <p>I use Microsoft's Visual C++ v12.0 as my primary Windows compiler, and both <a
    href="http://clang.llvm.org/">clang</a> and <a href="http://gcc.gnu.org/">gcc</a> as my
    Linux (and Cygwin) compilers. I also use <a href="http://www.openwatcom.org/">OpenWatcom
    v1.9</a> although that compiler is too sub-standard to process some of my components. I do
    not have easy access to any other compilers at this time. However, I would expect many of
    the components in this library to compile fine on any Standard compiler.</p>

    <p>The library is currently being upgraded to make use of C++ 2011 features. Consequently
    only compilers that support the new standard will be able to compile the entire library.</p>

    <hr />
    <h2><a name="headers">Header Conventions</a></h2>

    <p>Some of the components in this library make use of a special header file named <span
    class="filename">environ.hpp</span>. Here I describe how that header is used.</p>

    <p>The <span class="filename">environ.hpp</span> file provides various symbols that specify
    the compilation platform and the target platform. It is used by this library to distinguish
    between these things in cases where it matters. It defines various symbols that can be used
    in conditional compilation directives to selectively compile platform specific code. In many
    cases it can "autodetect" all the supported compilers and platforms. It is included as
    necessary and, aside from making sure it is available, you may not need to worry about it.
    However, in some cases you may need (or desire) to manually define certain symbols during
    compilation. Read over the information below and be especially sure to review the contents
    of <span class="filename">environ.hpp</span> itself to see if you need to take any special
    steps to insure proper compilation.</p>

    <p>Note that the leading 'e' (for "environment") on these names is there to minimize the
    chance of name collision with symbols defined in system and third party headers. This has
    been a continuing problem for me. Please excuse my hacked solution.</p>

    <dl>

      <dt>
        <b>eCOMPILER</b>
      </dt>

      <dd>
        <p>This symbol takes on a value that depends on the compiler being used to process the
        file. See <span class="filename">environ.hpp</span> for the details. You can use this
        symbol to conditionally compile in code that is specific to the features and limitations
        of a particular compiler.</p>
      </dd>

      <dt>
        <b>eOPSYS</b>
      </dt>

      <dd>
        <p>This symbol takes on a value that depends on the operating system that is targetted.
        See <span class="filename">environ.hpp</span> for the details. You can use this symbol
        to conditionally compile in code that is specific to a particular platform.</p>
      </dd>

      <dt>
        <b>eMULTITHREADED</b>
      </dt>

      <dd>
        <p>This symbol is defined or not depending on if the compiler has been asked to generate
        a multithreaded program or not. The header <span class="filename">environ.hpp</span> can
        autodetect this for some compilers and platforms, but not others. If you are building a
        multithreaded program and if <span class="filename">environ.hpp</span> can't autodetect
        that you should define this symbol manually during the compilation.</p>
      </dd>

      <dt>
        <b>eGUI</b>
      </dt>

      <dd>
        <p>This symbol takes on a value that depends on the graphical user interface that is
        being targetted (if any). See <span class="filename">environ.hpp</span> for the details.
        You should manually set this symbol if it matters. By default it has the value
        "pNONE".</p>
      </dd>

    </dl>

    <hr />
    <h2>
      <a name="except">Exceptions</a>
    </h2>

    <p>It is my hope that eventually all components in this library will use exceptions in a
    consistent manner to report errors. At this time, only a few components use exceptions. Many
    components currently report errors by way of the traditional "error code return" method.
    Furthermore, many of the components have not been reviewed for exception safety. If a
    component is not explicitly documented to be exception safe, then you should assume that it
    is not.</p>

    <hr />
    <h2>
      <a name="thread">Threads</a>
    </h2>

    <p>It is also my hope that eventually all components in this library will be thread safe
    when eMULTITHREADED is defined. All the platforms that this library supports have threads,
    so it is my belief that components that are not thread safe have no place in this library.
    However, at this time very few components have been reviewed for thread safety. As with
    exceptions, you should assume that a component is not thread safe unless it is explicitly
    documented as being thread safe.</p>

    <p>I define "thread safe" in the following way.</p>

    <ol>
      <li><p>Multiple threads can read an object simultaneously without any data corruption.
      (Internal mutable data is protected).</p></li>

      <li><p>A thread can read one object while a different thread writes to a logically
      independent object simultaneously without any data corruption. (Internal shared data is
      protected).</p></li>

      <li><p>If one thread tries to write to an object while another thread attempts to access
      the same (logical) object, data corruption might result unless you take steps to
      synchronize such access. (Internal writeable data is not necessarily protected).</p></li>
    </ol>

    <hr />
    <h2><a name="help">Want to Help?</a></h2>

    <p>I'd love to make this library large, useful, and robust. It my hope that as this library
    grows and evolves it will get a clear vision (something it now lacks) and take on a life of
    its own. But given the limited time and resources I have to spend on it, I could use all the
    help I can get if I want to make that happen! If you are interested in helping out, here are
    some things that need doing.</p>

    <ul>
      <li><p><b>Features</b>. Many of the components are rather lacking in features. Many could
      use a lot of elaboration.</p></li>

      <li><p><b>Error Handling</b>. Many of the components need better or more complete error
      handling added. Most need to be reviewed for exception safety.</p></li>

      <li><p><b>Threads</b>. Most of the components need to be reviewed for thread
      safety.</p></li>

      <li><p><b>Documentation</b>. Most of the components could use better
      documentation.</p></li>

      <li><p><b>Testing</b>. Each component should have a test program that could be used to
      test the component as automatically as possible. Currently very few components have proper
      test programs.</p></li>

      <li><p><b>Other Platforms</b>. If you have access to a platform (compiler or OS) different
      than what I usually use and want to help port components to that platform, that would be
      very valuable.</p></li>

    </ul>

    <p>If you have any interest in any of these things, then send me mail and let's talk about
    it.</p>

    <!-- BEGIN signature block -->
    <hr />
    <p>&copy; Copyright 2013 by Peter C. Chapin</p>

    <p>
      <i>Permission is granted to copy, distribute and/or modify this document under the terms
      of the GNU Free Documentation License, Version 1.1 or any later version published by the
      Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no
      Back-Cover Texts.</i>
    </p>

    <p>Last Revised: <b>November 2, 2013</b></p>
    <!-- END signature block -->
  </body>
</html>
